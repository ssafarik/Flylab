Flylab Software
-------------------------------------

This software is the central framework for many experiments & hardware 
platforms in the Dickinson Lab.  

Flylab provides a platform for experiments involving Drosophila walking in
virtual environments that consist of some combination of realtime multifly 
tracking, closed-loop (visual servoing) interaction with mechanical fly-sized 
robots, closed-loop laser-galvo steering to stimulate flies dynamically and
remotely, closed-loop interaction with LED display panels (q.v. M. Reiser), 
a fairly versatile architecture to conduct a wide range of experiments with 
minimal programming on the part of the researcher, data-logging of fly & robot 
states, and a number of other related pieces.

An effort has been to enable easy operation across multiple machines and multiple 
experimental hardware platforms, and as such each experimental "rig" has a 
directory in the "config" package to describe that hardware.  There you will 
find the relevant parameters needed for Flylab to operate on the given rig.  
To have Flylab use a given rig, simply point config/config/launch/hardware.launch 
to the appropriate name.  A given experiment can run on any rig (up to the 
rig's capabilities), and a given rig can run any experiment.

Calibration and setup instructions are in the file calibration.txt.

In the "experiments" package there is a set of experiments with an experiments 
library.  An experiment is started via the <experimentname>.launch file, and it
starts all of the other needed Flylab components.  Internally an experiment 
runs as a state machine, and each specific experiment is distinguished by a set of 
parameters in the appropriate <experimentname>.py file.  The available parameters
allow one to conduct a wide variety of experiments.  

During operation, you may view the state machine graph of the experiment with 
the following command:  rosrun smach_viewer smach_viewer.py



Some useful commands:
-----------------------
roslaunch experiments <experimentname>.launch                   # Run an experiment.

rosrun image_view image_view image:=camera/image_rect &         # Open a window for image_rect.
rosrun dynamic_reconfigure reconfigure_gui &                    # Open a window to change camera settings.
rosrun smach_viewer smach_viewer.py								# Show the state machine graph.
rxconsole														# Show ROS messages, logs, etc.


